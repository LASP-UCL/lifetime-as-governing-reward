import gymnasium as gym
import torch
import numpy as np
from minigrid.wrappers import FullyObsWrapper
import time
from utils import get_state_tensor

import sys
sys.path.append('../')

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

env_type = 'Empty'
env_size = '8x8'
env_str = f'{env_type}-{env_size}'
env_name = f'MiniGrid-FourRooms-v0'

env = gym.make(env_name, render_mode="human")
env = FullyObsWrapper(env)

AGENT_MODEL_NAME = f"trained-models/{env_name}/actor.pth"
agent = torch.load(AGENT_MODEL_NAME)
max_timesteps = 250

# Generate trajectories
state = env.reset()[0]
for t in range(max_timesteps):
    env.render() 
    state['image'] = state['image'].reshape(1, *state['image'].shape)
    state['direction'] = np.array([state['direction']])
    obs = get_state_tensor(state)
    action = agent.get_action_and_value(obs)[0].item()
    state, reward, terminated, truncated, info = env.step(action) 
    
    if terminated or truncated: 
        state = env.reset()[0]
        print("Reward:", reward)
env.close()
