import gymnasium as gym
import torch
from minigrid.wrappers import FullyObsWrapper
import time

import sys
sys.path.append('../')

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

env_type = 'Empty'
env_size = '8x8'
env_str = f'{env_type}-{env_size}'
env_name = f'MiniGrid-Empty-Random-6x6-v0'

env = gym.make(env_name, render_mode="human")
#env = FullyObsWrapper(env)

AGENT_MODEL_NAME = "trained-models/actor.pth"
agent = torch.load(AGENT_MODEL_NAME)
max_timesteps = 250

def get_state_tensor(state): # TODO: move to utils.py

    image = torch.tensor(state['image'], dtype=torch.float32)
    direction = state['direction']

    image = image.permute(2,0,1)

    direction_channels = torch.zeros(4, *image.shape[1:])
    direction_channels[direction] = 1
    state_tensor = torch.cat((image, direction_channels), dim=0)

    return state_tensor

# Generate trajectories
state = env.reset()[0]
for t in range(max_timesteps):
    env.render() 
    obs = torch.tensor(state['image'].flatten(), dtype=torch.float32)
    action = agent.get_action_and_value(obs)[0].item()
    state, reward, terminated, truncated, _ = env.step(action) 
    
    time.sleep(0.1)
    
    if terminated or truncated: state = env.reset()[0]

env.close()
